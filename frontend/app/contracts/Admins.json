{
  "compiler": {
    "version": "0.8.24+commit.e11b9ed9"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "initialOwner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "ERC1167FailedCreateClone",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "OwnableInvalidOwner",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "OwnableUnauthorizedAccount",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "enum Admins.Role",
            "name": "role",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "contractt",
            "type": "address"
          }
        ],
        "name": "Granted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "addAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_addr",
            "type": "address"
          }
        ],
        "name": "addSuperAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "adminRoles",
        "outputs": [
          {
            "internalType": "enum Admins.Role",
            "name": "",
            "type": "uint8"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "adminsAccounts",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "adminsContracts",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "oldAdmin",
            "type": "address"
          }
        ],
        "name": "removeAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_addr",
            "type": "address"
          }
        ],
        "name": "removeSuperAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "Manages administrative privileges in a smart contract system.",
      "errors": {
        "ERC1167FailedCreateClone()": [
          {
            "details": "A clone instance deployment failed."
          }
        ],
        "OwnableInvalidOwner(address)": [
          {
            "details": "The owner is not a valid owner account. (eg. `address(0)`)"
          }
        ],
        "OwnableUnauthorizedAccount(address)": [
          {
            "details": "The caller account is not authorized to perform an operation."
          }
        ]
      },
      "kind": "dev",
      "methods": {
        "addAdmin(address)": {
          "details": "Adds a new admin.",
          "params": {
            "newAdmin": "Address to be added as admin."
          }
        },
        "addSuperAdmin(address)": {
          "details": "Adds a new SuperAdmin to the contract. This function can only be called by the contract owner. It ensures that the address being added does not already exist as either a SuperAdmin or Admin. After verification, it assigns the SuperAdmin role to the address and emits an event.",
          "params": {
            "_addr": "Address to be added as a SuperAdmin."
          }
        },
        "constructor": {
          "details": "Constructor that sets the deployer as the initial admin."
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "removeSuperAdmin(address)": {
          "details": "Removes a super administrator from the contract. This function allows the contract owner to remove an address from the list of super administrators.  It updates the admin's role to 'None' and emits a 'Granted' event indicating the role change. Note: This function should be called only by the contract owner.",
          "params": {
            "_addr": "The address to be removed from the super administrators list."
          }
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "title": "Admins Contract",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addAdmin(address)": {
          "notice": "Only existing superadmins can add new admins. //TODO newContract will be removed to be used after deploy"
        },
        "addSuperAdmin(address)": {
          "notice": "This action is irreversible through this function and can only be performed by the contract owner."
        },
        "removeSuperAdmin(address)": {
          "notice": "Ensure that the address being removed is indeed a super administrator and that  you have the necessary permissions to perform this action."
        }
      },
      "notice": "This contract allows for the addition and removal of admin addresses.",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/Admins.sol": "Admins"
    },
    "evmVersion": "shanghai",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": []
  },
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "keccak256": "0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a",
      "license": "MIT",
      "urls": [
        "bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6",
        "dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2"
      ]
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "keccak256": "0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b",
      "license": "MIT",
      "urls": [
        "bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609",
        "dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM"
      ]
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
      "license": "MIT",
      "urls": [
        "bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
        "dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
      ]
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
      "license": "MIT",
      "urls": [
        "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
        "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
      ]
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "keccak256": "0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155",
      "license": "MIT",
      "urls": [
        "bzz-raw://061475b7302a732dc598907790f407417551c2b13e89daa57b3698489ef5484b",
        "dweb:/ipfs/QmdX5qmk3VSniSErFuD4aVawQxUi2MuUbP7spPcHddPfcX"
      ]
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
      "license": "MIT",
      "urls": [
        "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
        "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
      ]
    },
    "contracts/Admins.sol": {
      "keccak256": "0x7cd4e1fdd60592548bd81151a4841d0e3eab6e2f34f10f113eba2e94191db9ec",
      "license": "MIT",
      "urls": [
        "bzz-raw://3fee801d1b1e42cbde38a440ed1ff2de971e0b9c3b0ac23d31e6958ae74efaf1",
        "dweb:/ipfs/QmTN398k3NqB6JLqUyJQckmTfdoWbUZj4jvdpv1cvqLnhZ"
      ]
    },
    "contracts/Albums.sol": {
      "keccak256": "0xaba5d0dcbb8784701185cd3d29529573f0992fc2a8eb5eebfb2acba518de4d88",
      "license": "MIT",
      "urls": [
        "bzz-raw://c43ec5a722b1fb01f38849753e2a223465abeb60d5b189b67061895b0e56a539",
        "dweb:/ipfs/QmXgHtm87CWPJWfSmb4n9jMsFikCQ9ZfLAP8NvsX5peVuM"
      ]
    }
  },
  "version": 1
}
